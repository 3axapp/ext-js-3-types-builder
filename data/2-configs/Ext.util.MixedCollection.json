{
  "name": "MixedCollection",
  "namespace": "Ext.util",
  "extends": "Ext.util.Observable",
  "constructorMethod": {
    "config": [
      {
        "name": "allowFunctions?",
        "type": [
          "boolean"
        ],
        "comment": ""
      },
      {
        "name": "listeners?",
        "type": [
          "object"
        ],
        "comment": ""
      }
    ]
  },
  "properties": [],
  "methods": [
    {
      "name": "_sort",
      "returnType": [],
      "visibility": "private",
      "arguments": [
        {
          "name": "property",
          "comment": "",
          "type": [
            "string"
          ]
        },
        {
          "name": "dir?",
          "comment": "",
          "type": [
            "string"
          ]
        },
        {
          "name": "fn?",
          "comment": "",
          "type": [
            "Function"
          ]
        }
      ]
    },
    {
      "name": "add",
      "returnType": [
        "object"
      ],
      "visibility": "public",
      "arguments": [
        {
          "name": "key",
          "comment": "",
          "type": [
            "string"
          ]
        },
        {
          "name": "o",
          "comment": "",
          "type": [
            "object"
          ]
        }
      ]
    },
    {
      "name": "addAll",
      "returnType": [],
      "visibility": "public",
      "arguments": [
        {
          "name": "objs",
          "comment": "",
          "type": [
            "object",
            "unknown[]"
          ]
        }
      ]
    },
    {
      "name": "addListener<T extends IMixedCollectionEvents = IMixedCollectionEvents, E extends keyof T = keyof T>",
      "returnType": [],
      "visibility": "public",
      "arguments": [
        {
          "name": "eventName",
          "comment": "",
          "type": [
            "E"
          ]
        },
        {
          "name": "handler",
          "comment": "",
          "type": [
            "T[E]"
          ]
        },
        {
          "name": "scope?",
          "comment": "",
          "type": [
            "object"
          ]
        },
        {
          "name": "options?",
          "comment": "",
          "type": [
            "object"
          ]
        }
      ]
    },
    {
      "name": "clear",
      "returnType": [],
      "visibility": "public",
      "arguments": []
    },
    {
      "name": "clone",
      "returnType": [
        "Ext.util.MixedCollection"
      ],
      "visibility": "public",
      "arguments": []
    },
    {
      "name": "contains",
      "returnType": [
        "boolean"
      ],
      "visibility": "public",
      "arguments": [
        {
          "name": "o",
          "comment": "",
          "type": [
            "object"
          ]
        }
      ]
    },
    {
      "name": "containsKey",
      "returnType": [
        "boolean"
      ],
      "visibility": "public",
      "arguments": [
        {
          "name": "key",
          "comment": "",
          "type": [
            "string"
          ]
        }
      ]
    },
    {
      "name": "createValueMatcher",
      "returnType": [],
      "visibility": "private",
      "arguments": [
        {
          "name": "value",
          "comment": "",
          "type": [
            "string"
          ]
        },
        {
          "name": "anyMatch",
          "comment": "",
          "type": [
            "boolean"
          ]
        },
        {
          "name": "caseSensitive",
          "comment": "",
          "type": [
            "boolean"
          ]
        },
        {
          "name": "exactMatch",
          "comment": "",
          "type": [
            "boolean"
          ]
        }
      ]
    },
    {
      "name": "each",
      "returnType": [],
      "visibility": "public",
      "arguments": [
        {
          "name": "fn",
          "comment": "",
          "type": [
            "Function"
          ]
        },
        {
          "name": "scope?",
          "comment": "",
          "type": [
            "object"
          ]
        }
      ]
    },
    {
      "name": "eachKey",
      "returnType": [],
      "visibility": "public",
      "arguments": [
        {
          "name": "fn",
          "comment": "",
          "type": [
            "Function"
          ]
        },
        {
          "name": "scope?",
          "comment": "",
          "type": [
            "object"
          ]
        }
      ]
    },
    {
      "name": "filter",
      "returnType": [
        "Ext.util.MixedCollection"
      ],
      "visibility": "public",
      "arguments": [
        {
          "name": "property",
          "comment": "",
          "type": [
            "string"
          ]
        },
        {
          "name": "value",
          "comment": "",
          "type": [
            "string",
            "RegExp"
          ]
        },
        {
          "name": "anyMatch?",
          "comment": "",
          "type": [
            "boolean"
          ]
        },
        {
          "name": "caseSensitive?",
          "comment": "",
          "type": [
            "boolean"
          ]
        }
      ]
    },
    {
      "name": "filterBy",
      "returnType": [
        "Ext.util.MixedCollection"
      ],
      "visibility": "public",
      "arguments": [
        {
          "name": "fn",
          "comment": "",
          "type": [
            "Function"
          ]
        },
        {
          "name": "scope?",
          "comment": "",
          "type": [
            "object"
          ]
        }
      ]
    },
    {
      "name": "find",
      "returnType": [
        "object"
      ],
      "visibility": "public",
      "arguments": [
        {
          "name": "fn",
          "comment": "",
          "type": [
            "Function"
          ]
        },
        {
          "name": "scope?",
          "comment": "",
          "type": [
            "object"
          ]
        }
      ]
    },
    {
      "name": "findIndex",
      "returnType": [
        "number"
      ],
      "visibility": "public",
      "arguments": [
        {
          "name": "property",
          "comment": "",
          "type": [
            "string"
          ]
        },
        {
          "name": "value",
          "comment": "",
          "type": [
            "string",
            "RegExp"
          ]
        },
        {
          "name": "start?",
          "comment": "",
          "type": [
            "number"
          ]
        },
        {
          "name": "anyMatch?",
          "comment": "",
          "type": [
            "boolean"
          ]
        },
        {
          "name": "caseSensitive?",
          "comment": "",
          "type": [
            "boolean"
          ]
        }
      ]
    },
    {
      "name": "findIndexBy",
      "returnType": [
        "number"
      ],
      "visibility": "public",
      "arguments": [
        {
          "name": "fn",
          "comment": "",
          "type": [
            "Function"
          ]
        },
        {
          "name": "scope?",
          "comment": "",
          "type": [
            "object"
          ]
        },
        {
          "name": "start?",
          "comment": "",
          "type": [
            "number"
          ]
        }
      ]
    },
    {
      "name": "fireEvent<T extends IMixedCollectionEvents = IMixedCollectionEvents, E extends keyof T = keyof T>",
      "returnType": [
        "boolean"
      ],
      "visibility": "public",
      "arguments": [
        {
          "name": "eventName",
          "comment": "",
          "type": [
            "E"
          ]
        },
        {
          "name": "...args",
          "comment": "",
          "type": [
            "Parameters<T[E]>"
          ]
        }
      ]
    },
    {
      "name": "first",
      "returnType": [
        "object"
      ],
      "visibility": "public",
      "arguments": []
    },
    {
      "name": "get",
      "returnType": [
        "object"
      ],
      "visibility": "public",
      "arguments": [
        {
          "name": "key",
          "comment": "",
          "type": [
            "string",
            "number"
          ]
        }
      ]
    },
    {
      "name": "getCount",
      "returnType": [
        "number"
      ],
      "visibility": "public",
      "arguments": []
    },
    {
      "name": "getKey",
      "returnType": [
        "object"
      ],
      "visibility": "public",
      "arguments": [
        {
          "name": "item",
          "comment": "",
          "type": [
            "object"
          ]
        }
      ]
    },
    {
      "name": "getRange",
      "returnType": [
        "unknown[]"
      ],
      "visibility": "public",
      "arguments": [
        {
          "name": "startIndex?",
          "comment": "",
          "type": [
            "number"
          ]
        },
        {
          "name": "endIndex?",
          "comment": "",
          "type": [
            "number"
          ]
        }
      ]
    },
    {
      "name": "hasListener<T extends IMixedCollectionEvents = IMixedCollectionEvents, E extends keyof T = keyof T>",
      "returnType": [
        "boolean"
      ],
      "visibility": "public",
      "arguments": [
        {
          "name": "eventName",
          "comment": "",
          "type": [
            "E"
          ]
        }
      ]
    },
    {
      "name": "indexOf",
      "returnType": [
        "number"
      ],
      "visibility": "public",
      "arguments": [
        {
          "name": "o",
          "comment": "",
          "type": [
            "object"
          ]
        }
      ]
    },
    {
      "name": "indexOfKey",
      "returnType": [
        "number"
      ],
      "visibility": "public",
      "arguments": [
        {
          "name": "key",
          "comment": "",
          "type": [
            "string"
          ]
        }
      ]
    },
    {
      "name": "insert",
      "returnType": [
        "object"
      ],
      "visibility": "public",
      "arguments": [
        {
          "name": "index",
          "comment": "",
          "type": [
            "number"
          ]
        },
        {
          "name": "key",
          "comment": "",
          "type": [
            "string"
          ]
        },
        {
          "name": "o?",
          "comment": "",
          "type": [
            "object"
          ]
        }
      ]
    },
    {
      "name": "item",
      "returnType": [
        "object"
      ],
      "visibility": "public",
      "arguments": [
        {
          "name": "key",
          "comment": "",
          "type": [
            "string",
            "number"
          ]
        }
      ]
    },
    {
      "name": "itemAt",
      "returnType": [
        "object"
      ],
      "visibility": "public",
      "arguments": [
        {
          "name": "index",
          "comment": "",
          "type": [
            "number"
          ]
        }
      ]
    },
    {
      "name": "key",
      "returnType": [
        "object"
      ],
      "visibility": "public",
      "arguments": [
        {
          "name": "key",
          "comment": "",
          "type": [
            "string",
            "number"
          ]
        }
      ]
    },
    {
      "name": "keySort",
      "returnType": [],
      "visibility": "public",
      "arguments": [
        {
          "name": "direction?",
          "comment": "",
          "type": [
            "string"
          ]
        },
        {
          "name": "fn?",
          "comment": "",
          "type": [
            "Function"
          ]
        }
      ]
    },
    {
      "name": "last",
      "returnType": [
        "object"
      ],
      "visibility": "public",
      "arguments": []
    },
    {
      "name": "on<T extends IMixedCollectionEvents = IMixedCollectionEvents, E extends keyof T = keyof T>",
      "returnType": [],
      "visibility": "public",
      "arguments": [
        {
          "name": "eventName",
          "comment": "",
          "type": [
            "E"
          ]
        },
        {
          "name": "handler",
          "comment": "",
          "type": [
            "T[E]"
          ]
        },
        {
          "name": "scope?",
          "comment": "",
          "type": [
            "object"
          ]
        },
        {
          "name": "options?",
          "comment": "",
          "type": [
            "object"
          ]
        }
      ]
    },
    {
      "name": "remove",
      "returnType": [
        "object"
      ],
      "visibility": "public",
      "arguments": [
        {
          "name": "o",
          "comment": "",
          "type": [
            "object"
          ]
        }
      ]
    },
    {
      "name": "removeAt",
      "returnType": [
        "object"
      ],
      "visibility": "public",
      "arguments": [
        {
          "name": "index",
          "comment": "",
          "type": [
            "number"
          ]
        }
      ]
    },
    {
      "name": "removeKey",
      "returnType": [
        "object"
      ],
      "visibility": "public",
      "arguments": [
        {
          "name": "key",
          "comment": "",
          "type": [
            "string"
          ]
        }
      ]
    },
    {
      "name": "removeListener<T extends IMixedCollectionEvents = IMixedCollectionEvents, E extends keyof T = keyof T>",
      "returnType": [],
      "visibility": "public",
      "arguments": [
        {
          "name": "eventName",
          "comment": "",
          "type": [
            "E"
          ]
        },
        {
          "name": "handler",
          "comment": "",
          "type": [
            "T[E]"
          ]
        },
        {
          "name": "scope?",
          "comment": "",
          "type": [
            "object"
          ]
        }
      ]
    },
    {
      "name": "reorder",
      "returnType": [],
      "visibility": "public",
      "arguments": [
        {
          "name": "mapping",
          "comment": "",
          "type": [
            "object"
          ]
        }
      ]
    },
    {
      "name": "replace",
      "returnType": [
        "object"
      ],
      "visibility": "public",
      "arguments": [
        {
          "name": "key",
          "comment": "",
          "type": [
            "string"
          ]
        },
        {
          "name": "o",
          "comment": "",
          "type": [
            "object"
          ]
        }
      ]
    },
    {
      "name": "sort",
      "returnType": [],
      "visibility": "public",
      "arguments": [
        {
          "name": "direction?",
          "comment": "",
          "type": [
            "string"
          ]
        },
        {
          "name": "fn?",
          "comment": "",
          "type": [
            "Function"
          ]
        }
      ]
    },
    {
      "name": "un<T extends IMixedCollectionEvents = IMixedCollectionEvents, E extends keyof T = keyof T>",
      "returnType": [],
      "visibility": "public",
      "arguments": [
        {
          "name": "eventName",
          "comment": "",
          "type": [
            "E"
          ]
        },
        {
          "name": "handler",
          "comment": "",
          "type": [
            "T[E]"
          ]
        },
        {
          "name": "scope?",
          "comment": "",
          "type": [
            "object"
          ]
        }
      ]
    }
  ],
  "events": [
    {
      "name": "add",
      "arguments": [
        {
          "name": "index",
          "comment": "",
          "type": [
            "number"
          ]
        },
        {
          "name": "o",
          "comment": "",
          "type": [
            "object"
          ]
        },
        {
          "name": "key",
          "comment": "",
          "type": [
            "string"
          ]
        }
      ]
    },
    {
      "name": "clear",
      "arguments": []
    },
    {
      "name": "remove",
      "arguments": [
        {
          "name": "o",
          "comment": "",
          "type": [
            "object"
          ]
        },
        {
          "name": "key?",
          "comment": "",
          "type": [
            "string"
          ]
        }
      ]
    },
    {
      "name": "replace",
      "arguments": [
        {
          "name": "key",
          "comment": "",
          "type": [
            "string"
          ]
        },
        {
          "name": "oldValue",
          "comment": "",
          "type": [
            "object"
          ]
        },
        {
          "name": "newValue",
          "comment": "",
          "type": [
            "object"
          ]
        }
      ]
    }
  ]
}
